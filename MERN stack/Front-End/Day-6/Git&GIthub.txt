*Explanation of some key commands:
  .git init  Use this command in your project folder to start using Git. It creates a 
  hidden .git folder that stores all the version history.

   .git clone  Use this to download a project that's already on a remote repository 
(like GitHub).

 . git add  Tells Git to track changes you've made to files and prepare them for 
the next commit. You need to "add" files to the staging area before you can 
commit them.

 .git commit  Saves a snapshot of your staged changes. Always write a good 
commit message to explain what you changed!

 .git status  A very useful command to see what's going on with your repository. 
It tells you about changes you've made, files you've staged, and your current 
branch.

 .git branch and git checkout  Essential for working with branches. Branching allows 
you to work on features or fixes in isolation.

 .git push  Sends your local commits to a remote repository, making your 
changes available to others or as a backup.

 .git pull  Gets the latest changes from the remote repository and merges them 
into your local branch. Use this to stay up-to-date with the work of others.
 
 Important Notes:
  .Commit Frequently: Commit your changes often, whenever you reach a 
logical stopping point or complete a small task. Smaller, more frequent 
commits are easier to understand and manage.

 .Write Good Commit Messages: Your commit messages should be clear and 
concise, explaining why you made the changes, not just what you changed. 
This helps you and others understand the history of the project later.

 .Use Branches for Features and Fixes: Don't work directly on the 
main branch for new features or bug fixes. Create branches to keep your work organized 
and prevent accidentally breaking the main codebase.


 Interview Questions (Related to Git):

 1.What is Git and why is it important in software development? (Hint: Version 
control, collaboration, tracking changes)
 2.Explain the difference between git add , git commit , and 
area, local commit, remote repository)
 git push . (Hint: Staging 

3.What is a branch in Git and why are branches useful? (Hint: Parallel 
development, feature isolation, bug fixes)
 4.How do you merge changes from one branch to another in Git? (Hint: 
 git merge )

5.What is a remote repository and why do we use them? Hint: Collaboration, 
backup, sharing code)
 6.Describe a typical Git workflow for developing a new feature. Hint: 
Branching, coding, committing, merging, pushing)
 7What is a merge conflict and how do you resolve it? Hint: Conflicting 
changes, manual resolution)
 This is a starting point for Git. There's much more to learn, but these basics and 
commands will get you going! Practice using these commands in a test repository 
to get comfortable with Git. 